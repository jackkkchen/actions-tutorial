# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

# 工作流的名称，会显示在 GitHub 仓库的 Actions 页面上
name: 天气预报推送

# 定义什么时候触发这个工作流
on:
  schedule:
    # 使用 cron 表达式设置定时任务
    # 格式：'分 时 日 月 星期'
    # UTC 1:00 AM 等于北京时间 9:00 AM (UTC+8)
    - cron: '0 1 * * 1-5'  # 工作日 9:00
    - cron: '0 2 * * 0,6'  # 周末 10:00
  # 允许在 GitHub 网页上手动触发工作流
  workflow_dispatch:
  # 当代码推送到指定分支时触发
  push:
    branches: [ "main" ]  # 只在推送到 main 分支时触发

# 设置工作流的权限
permissions:
  contents: read  # 只需要读取权限

# 定义具体的工作任务
jobs:
  # 定义一个多系统构建任务
  weather-report:
    # 在多个操作系统上运行
    strategy:
      matrix:
        # 定义要测试的操作系统
        os: [ubuntu-latest]
        # 定义要测试的 Python 版本
        python-version: ["3.12"]
        
    # 使用 matrix 中定义的操作系统
    runs-on: ${{ matrix.os }}
    
    # 环境变量
    env:
      TZ: Asia/Shanghai  # 设置时区
      PYTHONIOENCODING: utf8  # 添加 Python 编码设置

    # 执行步骤
    steps:
    # 1. 检出代码
    - name: 检出代码
      uses: actions/checkout@v3

    # 2. 设置 Python 环境
    - name: 设置 Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}

    # 3. 安装依赖（根据不同操作系统）
    - name: 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install requests beautifulsoup4 html5lib
      shell: bash  # 使用 bash shell，确保跨平台兼容

    # 4. 运行天气预报脚本
    - name: 运行天气预报
      run: |
        export PYTHONIOENCODING=utf8
        python -X utf8 weather_report.py
      shell: bash  # 使用 bash shell，确保跨平台兼容

    # 5. 如果脚本执行失败，输出错误日志
    - name: 输出错误日志
      if: failure()
      run: |
        echo "执行失败，查看错误信息"
        if [ -f weather_report.log ]; then
          cat weather_report.log
        fi
      shell: bash



# 优化内容：
# 1. 添加多个城市的天气推送，并可视化地图
# 2. 链接sqlite，保存天气数据和用户数据；
# 3. 条件触发：根据天气情况（如雨雪、温度、风力等）触发不同的推送消息；
# 4. 性能监控：每日发送性能报告，检测key流量数据。